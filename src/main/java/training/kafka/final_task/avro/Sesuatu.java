/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package training.kafka.final_task.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Sesuatu extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6550434306730553124L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sesuatu\",\"namespace\":\"training.kafka.final_task.avro\",\"fields\":[{\"name\":\"numbers\",\"type\":{\"type\":\"array\",\"items\":\"double\"}},{\"name\":\"operation\",\"type\":{\"type\":\"enum\",\"name\":\"Operation\",\"symbols\":[\"ADD\",\"SUBTRACT\",\"DIVIDE\",\"MULTIPLY\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sesuatu> ENCODER =
      new BinaryMessageEncoder<Sesuatu>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sesuatu> DECODER =
      new BinaryMessageDecoder<Sesuatu>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Sesuatu> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Sesuatu> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sesuatu>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Sesuatu to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Sesuatu from a ByteBuffer. */
  public static Sesuatu fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<java.lang.Double> numbers;
  @Deprecated public training.kafka.final_task.avro.Operation operation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sesuatu() {}

  /**
   * All-args constructor.
   * @param numbers The new value for numbers
   * @param operation The new value for operation
   */
  public Sesuatu(java.util.List<java.lang.Double> numbers, training.kafka.final_task.avro.Operation operation) {
    this.numbers = numbers;
    this.operation = operation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return numbers;
    case 1: return operation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: numbers = (java.util.List<java.lang.Double>)value$; break;
    case 1: operation = (training.kafka.final_task.avro.Operation)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'numbers' field.
   * @return The value of the 'numbers' field.
   */
  public java.util.List<java.lang.Double> getNumbers() {
    return numbers;
  }

  /**
   * Sets the value of the 'numbers' field.
   * @param value the value to set.
   */
  public void setNumbers(java.util.List<java.lang.Double> value) {
    this.numbers = value;
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public training.kafka.final_task.avro.Operation getOperation() {
    return operation;
  }

  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(training.kafka.final_task.avro.Operation value) {
    this.operation = value;
  }

  /**
   * Creates a new Sesuatu RecordBuilder.
   * @return A new Sesuatu RecordBuilder
   */
  public static training.kafka.final_task.avro.Sesuatu.Builder newBuilder() {
    return new training.kafka.final_task.avro.Sesuatu.Builder();
  }

  /**
   * Creates a new Sesuatu RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sesuatu RecordBuilder
   */
  public static training.kafka.final_task.avro.Sesuatu.Builder newBuilder(training.kafka.final_task.avro.Sesuatu.Builder other) {
    return new training.kafka.final_task.avro.Sesuatu.Builder(other);
  }

  /**
   * Creates a new Sesuatu RecordBuilder by copying an existing Sesuatu instance.
   * @param other The existing instance to copy.
   * @return A new Sesuatu RecordBuilder
   */
  public static training.kafka.final_task.avro.Sesuatu.Builder newBuilder(training.kafka.final_task.avro.Sesuatu other) {
    return new training.kafka.final_task.avro.Sesuatu.Builder(other);
  }

  /**
   * RecordBuilder for Sesuatu instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sesuatu>
    implements org.apache.avro.data.RecordBuilder<Sesuatu> {

    private java.util.List<java.lang.Double> numbers;
    private training.kafka.final_task.avro.Operation operation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(training.kafka.final_task.avro.Sesuatu.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.numbers)) {
        this.numbers = data().deepCopy(fields()[0].schema(), other.numbers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Sesuatu instance
     * @param other The existing instance to copy.
     */
    private Builder(training.kafka.final_task.avro.Sesuatu other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.numbers)) {
        this.numbers = data().deepCopy(fields()[0].schema(), other.numbers);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.operation)) {
        this.operation = data().deepCopy(fields()[1].schema(), other.operation);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'numbers' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getNumbers() {
      return numbers;
    }

    /**
      * Sets the value of the 'numbers' field.
      * @param value The value of 'numbers'.
      * @return This builder.
      */
    public training.kafka.final_task.avro.Sesuatu.Builder setNumbers(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.numbers = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'numbers' field has been set.
      * @return True if the 'numbers' field has been set, false otherwise.
      */
    public boolean hasNumbers() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'numbers' field.
      * @return This builder.
      */
    public training.kafka.final_task.avro.Sesuatu.Builder clearNumbers() {
      numbers = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public training.kafka.final_task.avro.Operation getOperation() {
      return operation;
    }

    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public training.kafka.final_task.avro.Sesuatu.Builder setOperation(training.kafka.final_task.avro.Operation value) {
      validate(fields()[1], value);
      this.operation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public training.kafka.final_task.avro.Sesuatu.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sesuatu build() {
      try {
        Sesuatu record = new Sesuatu();
        record.numbers = fieldSetFlags()[0] ? this.numbers : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.operation = fieldSetFlags()[1] ? this.operation : (training.kafka.final_task.avro.Operation) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sesuatu>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sesuatu>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sesuatu>
    READER$ = (org.apache.avro.io.DatumReader<Sesuatu>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
